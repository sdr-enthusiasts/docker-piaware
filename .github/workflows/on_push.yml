name: Push

on:

  # Build and deploy the image on pushes to main/master branch
  push:

    branches: 
      - master
      - main

    # Don't trigger if it's just a documentation update
    paths-ignore:
      - '**.md'
      - '**.MD'
      - 'LICENSE'
      - '.gitattributes'
      - '.gitignore'
      - '.dockerignore'

  # Build and deploy the image nightly (to ensure we pick up any security updates)
  schedule:
    - cron: "0 10 * * *"

# Set action-wide environment variables
#  - REPO: repo name on dockerhub
#  - IMAGE: image name on dockerhub
env:
  REPO: mikenye
  IMAGE: piaware

jobs:

  deploy_dockerhub_multiarch_latest:
    name: Deploy (Multi-Arch) latest
    runs-on: ubuntu-latest
    
    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:latest


  deploy_dockerhub_multiarch_version_specific:

    name: Deploy (Multi-Arch) latest
    runs-on: ubuntu-latest
    needs:
      - deploy_dockerhub_multiarch_latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "${{ env.REPO }}/${{ env.IMAGE }}:latest"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "${{ env.REPO }}/${{ env.IMAGE }}:latest" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.REPO }}/${{ env.IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.VERSION_TAG }}


  deploy_dockerhub_multiarch_latest_nohealthcheck:

    name: Deploy (Multi-Arch) latest_nohealthcheck
    runs-on: ubuntu-latest
    needs:
      - deploy_dockerhub_multiarch_latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck
      
      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:latest_nohealthcheck


  deploy_dockerhub_multiarch_version_specific_nohealthcheck:

    name: Deploy (Multi-Arch) latest_nohealthcheck
    runs-on: ubuntu-latest
    needs:
      - deploy_dockerhub_multiarch_latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "${{ env.REPO }}/${{ env.IMAGE }}:latest"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "${{ env.REPO }}/${{ env.IMAGE }}:latest" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.REPO }}/${{ env.IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.VERSION_TAG }}_nohealthcheck


  deploy_dockerhub_single_arch_latest:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/i386

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get archictecture suffix
      - name: Get image architecture suffix
        run: |
          echo "ARCH_TAG=$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')" >> $GITHUB_ENV
      
      # Show archictecture suffix
      - name: Show image architecture suffix
        run: |
          echo "Architecture suffix: ${{ env.ARCH_TAG }}"

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:latest_${{ env.ARCH_TAG }}


  deploy_dockerhub_single_arch_version_specific:

    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/i386
    needs:
      - deploy_dockerhub_single_arch_latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get archictecture suffix
      - name: Get image architecture suffix
        run: |
          echo "ARCH_TAG=$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')" >> $GITHUB_ENV
      
      # Show archictecture suffix
      - name: Show image architecture suffix
        run: |
          echo "Architecture suffix: ${{ env.ARCH_TAG }}"
      
      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "${{ env.REPO }}/${{ env.IMAGE }}:latest_${{ env.ARCH_TAG }}"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "${{ env.REPO }}/${{ env.IMAGE }}:latest_${{ env.ARCH_TAG }}" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.REPO }}/${{ env.IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.VERSION_TAG }}_${{ env.ARCH_TAG }}


  deploy_dockerhub_single_arch_latest_nohealthcheck:

    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/i386
    needs:
      - deploy_dockerhub_single_arch_latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get archictecture suffix
      - name: Get image architecture suffix
        run: |
          echo "ARCH_TAG=$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')" >> $GITHUB_ENV
      
      # Show archictecture suffix
      - name: Show image architecture suffix
        run: |
          echo "Architecture suffix: ${{ env.ARCH_TAG }}"

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck
      
      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:latest_nohealthcheck_${{ env.ARCH_TAG }}


  deploy_dockerhub_single_arch_version_specific_nohealthcheck:

    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/i386
    needs:
      - deploy_dockerhub_single_arch_latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get archictecture suffix
      - name: Get image architecture suffix
        run: |
          echo "ARCH_TAG=$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')" >> $GITHUB_ENV
      
      # Show archictecture suffix
      - name: Show image architecture suffix
        run: |
          echo "Architecture suffix: ${{ env.ARCH_TAG }}"

      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "${{ env.REPO }}/${{ env.IMAGE }}:latest_${{ env.ARCH_TAG }}"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "${{ env.REPO }}/${{ env.IMAGE }}:latest_${{ env.ARCH_TAG }}" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.REPO }}/${{ env.IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck
      
      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.VERSION_TAG }}_nohealthcheck_${{ env.ARCH_TAG }}
